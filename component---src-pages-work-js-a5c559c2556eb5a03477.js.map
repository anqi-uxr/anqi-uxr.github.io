{"version":3,"sources":["webpack:///./src/components/BoxHandler/styled.js","webpack:///./src/components/BoxHandler/index.js","webpack:///./src/components/Lab/styled.js","webpack:///./src/components/Lab/index.js","webpack:///./src/pages/work.js"],"names":["BoxHandler","styled","article","V","box","sm","media","greaterThan","default","children","LabList","section","LabItem","a","attrs","props","href","title","rel","Image","Img","alt","Title","h1","T","xxs","Text","p","LabImg","imageSrc","image","useStaticQuery","images","edges","find","node","relativePath","fluid","childImageSharp","Lab","content","map","key","id","path","DateTime","date","description","WorkPage","data","Layout","allLabJson"],"mappings":"6NAKaA,EAAaC,IAAOC,QAAV,wEAAGD,CAAH,skBACXE,IAASC,IACFD,IAAeC,IAClBD,IAAYC,IAKfD,IAAQE,GAIjBC,IAAMC,YAAY,SAAlBD,CAZmB,gDAaRH,IAAQK,SAWKL,IAAaK,SCd1BR,EAVI,SAAC,GAAkB,IAAhBS,EAAe,EAAfA,SACpB,OACE,kBAAC,EAAD,KAAeA,I,iCCDNC,EAAUT,IAAOU,QAAV,sEAAGV,CAAH,gHAECE,IAAQK,QACXL,IAAQK,SAIbI,EAAUX,IAAOY,EAAEC,OAAM,SAAAC,GAAK,MAAK,CAC9CC,KAAMD,EAAMC,KACZC,MAAOF,EAAME,MACbC,IAAK,0BAHa,sEAAGjB,CAAH,8CASPkB,EAAQlB,YAAOmB,KAAKN,OAAM,SAAAC,GAAK,MAAK,CAC/CM,IAAKN,EAAME,UADK,oEAAGhB,CAAH,qCAICE,IAAQK,SAGdc,EAAQrB,IAAOsB,GAAV,oEAAGtB,CAAH,mFACduB,IAGcrB,IAAQE,GAILF,IAAQsB,KAIhBC,EAAOzB,IAAO0B,EAAV,mEAAG1B,CAAH,QACbuB,KCjCEI,EAAS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAqBVC,EApBaC,yBAAe,cAA1BC,OAoBaC,MAAMC,MAAK,SAAAJ,GAC9B,OAAOA,EAAMK,KAAKC,eAAiBP,EAASO,gBAG9C,OAAO,kBAAC,EAAD,CAASC,MAAOP,EAAMK,KAAKG,gBAAgBD,SA6BrCE,EA1BH,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACb,OACE,kBAAC,EAAD,KACGA,EAAQC,KAAI,YAAe,IAAZN,EAAW,EAAXA,KACd,OACE,kBAAC,EAAD,CACEO,IAAKP,EAAKQ,GACV3B,KAAMmB,EAAKS,KACX3B,MAAOkB,EAAKlB,OACZ,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQY,SAAUM,EAAKN,WACvB,kBAACgB,EAAA,EAAD,KAAWV,EAAKW,MAChB,kBAAC,EAAD,KAAUX,EAAKlB,OACf,kBAAC,EAAD,KAASkB,EAAKY,oBCbbC,UAXE,WACf,IAAMC,EAAOlB,yBApBI,cAsBjB,OACE,kBAACmB,EAAA,EAAD,KACE,kBAAC,IAAD,CAAKjC,MAAM,SACX,kBAAC,EAAD,CAAKuB,QAASS,EAAKE,WAAWlB","file":"component---src-pages-work-js-a5c559c2556eb5a03477.js","sourcesContent":["import styled from 'styled-components'\nimport media from 'styled-media-query'\n\nimport * as V from 'styles/variables'\n\nexport const BoxHandler = styled.article`\n  border: ${V.Border.box};\n  border-radius: ${V.BorderRadius.box};\n  box-shadow: ${V.BoxShadow.box};\n  color: var(--primaryColor);\n  display: block;\n  height: 100%;\n  min-height: 15rem;\n  padding: ${V.Space.sm};\n  position: relative;\n  will-change: border-color;\n\n  ${media.greaterThan('medium')`\n    padding: ${V.Space.default};\n  `}\n\n  &:after,\n  &:before {\n    bottom: 0;\n    content: '';\n    left: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n    transition: transform ${V.Transition.default};\n  }\n\n  &:before {\n    border-left: 1px solid var(--highlightColor);\n    border-right: 1px solid var(--highlightColor);\n    transform: scaleY(0);\n  }\n\n  &:after {\n    border-bottom: 1px solid var(--highlightColor);\n    border-top: 1px solid var(--highlightColor);\n    transform: scaleX(0);\n  }\n\n  &:hover {\n    &:before {\n      transform: scaleY(1)\n    }\n\n    &:after {\n      transform: scaleX(1)\n    }\n  }\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport * as S from './styled'\n\nconst BoxHandler = ({ children }) => {\n  return (\n    <S.BoxHandler>{children}</S.BoxHandler>\n  )\n}\n\nBoxHandler.propTypes = {\n  children: PropTypes.node.isRequired\n}\n\nexport default BoxHandler\n","import styled from 'styled-components'\nimport Img from 'gatsby-image'\n\nimport * as V from 'styles/variables'\nimport * as T from 'styles/typography'\n\nexport const LabList = styled.section`\n  display: grid;\n  grid-column-gap: ${V.Space.default};\n  grid-row-gap: ${V.Space.default};\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n`\n\nexport const LabItem = styled.a.attrs(props => ({\n  href: props.href,\n  title: props.title,\n  rel: 'noopener noreferrer'\n}))`\n  color: var(--primaryColor);\n  display: block;\n`\n\nexport const Image = styled(Img).attrs(props => ({\n  alt: props.title\n}))`\n  display: block;\n  margin-bottom: ${V.Space.default};\n`\n\nexport const Title = styled.h1`\n  ${T.Heading2}\n\n  &:not(:first-child) {\n    margin-top: ${V.Space.sm};\n  }\n\n  &:not(:last-child) {\n    margin-bottom: ${V.Space.xxs};\n  }\n`\n\nexport const Text = styled.p`\n  ${T.Subtitle2}\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nimport DateTime from 'components/DateTime'\nimport BoxHandler from 'components/BoxHandler'\n\nimport * as S from './styled'\n\nconst LabImg = ({ imageSrc }) => {\n  const { images } = useStaticQuery(\n    graphql`\n      query {\n        images: allFile(filter: { sourceInstanceName: { eq: \"lab\" } }) {\n          edges {\n            node {\n              extension\n              relativePath\n              childImageSharp {\n                fluid(maxWidth: 300) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const image = images.edges.find(image => {\n    return image.node.relativePath === imageSrc.relativePath\n  })\n\n  return <S.Image fluid={image.node.childImageSharp.fluid} />\n}\n\nconst Lab = ({ content }) => {\n  return (\n    <S.LabList>\n      {content.map(({ node }) => {\n        return (\n          <S.LabItem\n            key={node.id}\n            href={node.path}\n            title={node.title}>\n            <BoxHandler>\n              <LabImg imageSrc={node.imageSrc} />\n              <DateTime>{node.date}</DateTime>\n              <S.Title>{node.title}</S.Title>\n              <S.Text>{node.description}</S.Text>\n            </BoxHandler>\n          </S.LabItem>\n        )\n      })}\n    </S.LabList>\n  )\n}\n\nLab.propTypes = {\n  children: PropTypes.node.isRequired\n}\n\nexport default Lab\n","import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nimport Layout from 'components/Layout'\nimport SEO from 'components/Seo'\nimport Lab from 'components/Lab'\n\nconst workJsonQuery = graphql`\n  query {\n    allLabJson {\n      edges {\n        node {\n          id,\n          path\n          title\n          date\n          description\n          imageSrc {\n            relativePath\n          }\n        }\n      }\n    }\n  }\n`\n\nconst WorkPage = () => {\n  const data = useStaticQuery(workJsonQuery)\n\n  return (\n    <Layout>\n      <SEO title=\"Work\" />\n      <Lab content={data.allLabJson.edges} />\n    </Layout>\n  )\n}\n\nexport default WorkPage\n"],"sourceRoot":""}